class Real {
    /* A fixed point real number (aka Qm.n, Q0.15 in our case).
     *
     * Supports real numbers in the range [-1, 1) with precision 1/2^15.
     * Real provides a set of methods for manipulation of "real" numbers
     * instead of encapsulating the value field because otherwise the memory
     * management would become rather cumbersome (unfortunately, jack lacks
     * any kind of automatic memory management).
     *
     * For a float value `x` its fixed point representations is computed as
     * follows:
     *    real = x * 2^n
     */
    static int m;
    static int n;

    function void init() {
        let m = 0;
        let n = 15;
        return;
    }

    // return the sum of two real numbers, can overflow
    function int add(int a, int b) {
        return a + b;
    }

    // return the difference of two real numbers, can overflow
    function int sub(int a, int b) {
        return a - b;
    }

    // return the multiplication of two real numbers,
    // never overflow in our case (since all numbers have their absolute value
    // not greater than 1)
    function int mul(int a, int b) {
        var int a_bits, b_bits, free_bits, k;
        var boolean neg;
        var int res;

        // We are calculating the folloing value:
        //     (a * b) >> n

        let neg = false;
        if (a < 0) {
            let a = -a;
            let neg = ~neg;
        }
        if (b < 0) {
            let b = -b;
            let neg = ~neg;
        }

        let a_bits = Utils.bitsize(a);
        let b_bits = Utils.bitsize(b);
        let free_bits = 30 - a_bits - b_bits;
        if (n > free_bits) {
            let k = n - free_bits;
        } else {
            let k = 0;
        }

        let a = Utils.rsh(a, k/2);
        let b = Utils.rsh(b, k - (k/2));
        let res = Utils.rsh(a * b, n - k);
        if (neg) {
            let res = -res;
        }
        return res;
    }

    // return int(factor * value), where `factor` is a "real" value
    //
    function int scale(int factor, int value) {
        var int k, res;

        // negative values are not supported
        if (value < 0) {
            return 0;
        }

        let k = Utils.bitsize(value);

        // 1. transform Qm.n -> Q(k).(15-k), so we will have `k` free bits
        //    (while losing k less important bits)
        // 2. mutiply x * _value, the result will be in Q(2k)(15-k), while
        //    `k` most improtant bits will be lost, the previous step ensures
        //    that they are zeros aniway. After the interger overflow we
        //    have got a Q(k).(15-k) real number again.
        // 3. cast it to an interger value (i.e. to Q15.0).
        let res = Utils.rsh(factor, k - m);
        let res = res * value;
        let res = Utils.rsh(res, 15 - k);

        return res;
    }
}
