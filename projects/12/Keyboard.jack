// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int address;

    /** Initializes the keyboard. */
    function void init() {
        let address = 24576;
        return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(address);
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
        var int key;
        var boolean key_pressed;

        let key_pressed = false;
        while (~key_pressed) {
            let key = Keyboard.keyPressed();
            let key_pressed = ~(key = 0);
        }
        while (key_pressed) {
            let key_pressed = ~(Keyboard.keyPressed() = 0);
        }

        do Output.printChar(key);
        return key;
    }

    function void _copy(String src, String dst) {
        var int i;
        let i = 0;
        while (i < src.length()) {
            do dst.appendChar(src.charAt(i));
            let i = i + 1;
        }
        return;
    }

    function String _expand(String s, int new_size) {
        var String new_s;
        let new_s = String.new(new_size);
        do Keyboard._copy(s, new_s);
        do s.dispose();
        return new_s;
    }


    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String line;
        var char key;
        var int max_size;

        let max_size = 64;
        let line = String.new(max_size);

        do Output.printString(message);
        do Output.println();

        while (true) {
            let key = Keyboard.readChar();

            if (key = String.newLine()) {
                do Output.println();
                return line;
            } else {
                if (key = String.backSpace()) {
                    do line.eraseLastChar();
                } else {
                    if (line.length() = max_size) {
                        let max_size = 2 * max_size;
                        let line = Keyboard._expand(line, max_size);
                    }
                    do line.appendChar(key);
                }
            }
        }
        return null;  // unreachable;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
        var String str;
        var int val;
        let str = Keyboard.readLine(message);
        let val = str.intValue();
        do Output.printString(str);
        do str.dispose();
        return val;
    }
}
