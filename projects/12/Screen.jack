// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array bitmask;

    /** Initializes the Screen. */
    function void init() {
        var int i, mask;

        let color = true;

        let bitmask = Array.new(16);
        let i = 0;
        let mask = 1;
        while (i < 16) {
            let bitmask[i] = mask;
            let mask = mask + mask;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i, j;
        var boolean cur_color;
        let cur_color = color;
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 512, 256);
        do Screen.setColor(cur_color);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, word, mask;

        let address = 16384 + (32 * y) + (x / 16);
        let word = Memory.peek(address);
        let mask = bitmask[x - ((x / 16) * 16)];
        if (color) {
            let word = word | mask;
        } else {
            let word = word & (~mask);
        }
        do Memory.poke(address, word);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (x1 = x2) {
            do Screen._draw_vline(x1, y1, y2);
        } else {
            if (y1 = y2) {
                do Screen._draw_hline(x1, x2, y1);
            } else {
                do Screen._draw_line(x1, y1, x2, y2);
            }
        }
        return;
    }

    function void _draw_line(int x1, int y1, int x2, int y2) {
        var int tmp;
        if (x2 < x1) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        if (y1 < y2) {
            do Screen._draw_line_ur(x1, y1, x2, y2);
        } else {
            do Screen._draw_line_br(x1, y1, x2, y2);
        }
        return;
    }

    function void _draw_line_ur(int x1, int y1, int x2, int y2) {
        var int a, b, a_step, dx, dy, diff;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((a < dx) & (b < dy)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void _draw_line_br(int x1, int y1, int x2, int y2) {
        var int a, b, a_step, dx, dy, diff;
        let dx = x2 - x1;
        let dy = y1 - y2;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((a < dx) & (b < dy)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b - 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void _draw_vline(int x, int y1, int y2) {
        var int a, b;
        let a = Math.min(y1, y2);
        let b = Math.max(y1, y2);
        while (a < b) {
            do Screen.drawPixel(x, a);
            let a = a + 1;
        }
        return;
    }

    function void _draw_hline(int x1, int x2, int y) {
        var int a, b;
        let a = Math.min(x1, x2);
        let b = Math.max(x1, x2);
        while (a < b) {
            do Screen.drawPixel(a, y);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        while (y1 < y2) {
            do Screen._draw_hline(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        let dy = r;
        while (dy > (-r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen._draw_hline(x - dx, x + dx, y + dy);
            let dy = dy - 1;
        }
        return;
    }
}
